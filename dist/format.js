window.storyFormat({
  "name": "TwisonEdge",
  "version": "0.0.1",
  "author": "Mike Lazer-Walker, Kris Szafranski",
  "description": "Export your Twine 2 story as a JSON document with custom node support",
  "proofing": false,
  "source": "<html>\r\n\t<head>\r\n\t\t<title>{{STORY_NAME}}</title>\r\n\t\t<script type=\"text/javascript\">\r\n/**\r\n * Twison - Twine 2 JSON Export Story Format\r\n * \r\n * Copyright (c) 2015 Mike Walker\r\n * https://lazerwalker.com\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and\r\n * associated documentation files (the \"Software\"), to deal in the Software without restriction,\r\n * including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense,\r\n * and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so,\r\n * subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in all copies or substantial\r\n * portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT\r\n * LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\r\n * IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\r\n * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\r\n * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n */\r\nvar Twison = {\r\n  extractLinksFromText: function (text) {\r\n    var links = text.match(/\\[\\[.+?\\]\\]/g)\r\n    if (links) {\r\n      return links.map(function (link) {\r\n        var differentName = link.match(/\\[\\[(.*?)\\-\\&gt;(.*?)\\]\\]/);\r\n        if (differentName) {\r\n          // [[name->link]]\r\n          // return differentName;\r\n          return {\r\n            name: differentName[1],\r\n            link: differentName[2]\r\n          };\r\n        } else {\r\n          // [[link]]\r\n          link = link.substring(2, link.length - 2)\r\n          return {\r\n            name: link,\r\n            link: link\r\n          }\r\n        }\r\n      });\r\n    }\r\n  },\r\n\r\n  extractEventDetails: function (text) {\r\n    var details = text.match(/\\(\\(.+?\\)\\)/g);\r\n\r\n    // details is an array\r\n    if (details) {\r\n      // results object\r\n      var output = {};\r\n      // add each tag found and add it to our output object as a key/value pair\r\n      for (detail of details) {\r\n        var chunks = detail.match(/\\(\\((.*?)\\-\\&gt;(.*?)\\)\\)/);\r\n        // name is an array of string parts\r\n        if (chunks) {\r\n          output[chunks[1]] = chunks[2];\r\n        }\r\n      }\r\n\r\n      // return output as one object with properties\r\n      return output;\r\n    }\r\n  },\r\n\r\n  convertPassage: function (passage) {\r\n    var dict = { text: passage.innerHTML };\r\n\r\n    // handle passage links\r\n    var links = Twison.extractLinksFromText(dict.text);\r\n    if (links) {\r\n      dict.links = links;\r\n    }\r\n\r\n    // pull out scenario info from this passage\r\n    var eventDetails = Twison.extractEventDetails(dict.text);\r\n    if (eventDetails) {\r\n      dict.eventDetails = eventDetails;\r\n    }\r\n\r\n    // process text\r\n    // story text only\r\n    /*\r\n    This is a one-off, displayed event.\\n\\n\\n((display->true))\\n((locationName->CityHall))\\n((npcName->Edwin Honeycut))\\n((actionPointCost->1))\\n((triggerTime->10))\r\n    */\r\n    var parts = dict.text.split(\"\\n\\n\");\r\n    dict.text = parts[0];\r\n\r\n    // extract these tags from the passage data\r\n    [\"name\", \"pid\", \"position\", \"tags\"].forEach(function (attr) {\r\n      var value = passage.attributes[attr].value;\r\n      if (value) {\r\n        dict[attr] = value;\r\n      }\r\n    });\r\n\r\n    if (dict.position) {\r\n      var position = dict.position.split(',')\r\n      dict.position = {\r\n        x: position[0],\r\n        y: position[1]\r\n      }\r\n    }\r\n\r\n    if (dict.tags) {\r\n      dict.tags = dict.tags.split(\" \");\r\n    }\r\n\r\n    return dict;\r\n  },\r\n\r\n  convertStory: function (story) {\r\n    var passages = story.getElementsByTagName(\"tw-passagedata\");\r\n    // convert each passage\r\n    var convertedPassages = Array.prototype.slice.call(passages).map(Twison.convertPassage);\r\n\r\n    var dict = {\r\n      passages: convertedPassages\r\n    };\r\n\r\n    // extract global story info \r\n    [\"name\", \"startnode\", \"creator\", \"creator-version\", \"ifid\"].forEach(function (attr) {\r\n      var value = story.attributes[attr].value;\r\n      if (value) {\r\n        dict[attr] = value;\r\n      }\r\n    });\r\n\r\n    // Add PIDs to links\r\n    var pidsByName = {};\r\n    dict.passages.forEach(function (passage) {\r\n      pidsByName[passage.name] = passage.pid;\r\n    });\r\n    // Search thru all other passages for matching pid to each link\r\n    dict.passages.forEach(function (passage) {\r\n      if (!passage.links) return;\r\n      passage.links.forEach(function (link) {\r\n        link.pid = pidsByName[link.link];\r\n        if (!link.pid) {\r\n          link.broken = true;\r\n        }\r\n      });\r\n    });\r\n\r\n    return dict;\r\n  },\r\n\r\n  // entry point, called from built.js\r\n  convert: function () {\r\n    var storyData = document.getElementsByTagName(\"tw-storydata\")[0];\r\n    var json = JSON.stringify(Twison.convertStory(storyData), null, 2);\r\n    document.getElementById(\"output\").innerHTML = json;\r\n  }\r\n}\r\n\r\nwindow.Twison = Twison;\t\t\r\n\t\t</script>\r\n\t</head>\r\n\t<body>\r\n\t\t<pre id=\"output\">\r\n\t\t\r\n\t\t</pre>\r\n\t\t<div id=\"storyData\" style=\"display: none;\">\r\n\t\t\t{{STORY_DATA}}\r\n\t\t</div>\r\n\t\t<script>\r\n\t\t\tTwison.convert()\r\n\t\t</script>\r\n\t</body>\r\n</html>"
});