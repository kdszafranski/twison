window.storyFormat({
  "name": "TwisonEdge",
  "version": "0.0.1",
  "author": "Mike Lazer-Walker, Kris Szafranski",
  "description": "Export your Twine 2 story as a JSON document with custom node support",
  "proofing": false,
  "source": "<html>\r\n\t<head>\r\n\t\t<title>{{STORY_NAME}}</title>\r\n\t\t<script type=\"text/javascript\">\r\n/**\r\n * Twison - Twine 2 JSON Export Story Format\r\n * \r\n * Copyright (c) 2015 Mike Walker\r\n * https://lazerwalker.com\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and\r\n * associated documentation files (the \"Software\"), to deal in the Software without restriction,\r\n * including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense,\r\n * and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so,\r\n * subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in all copies or substantial\r\n * portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT\r\n * LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\r\n * IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\r\n * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\r\n * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n */\r\nvar Twison={extractLinksFromText:function(text){var links=text.match(/\\[\\[.+?\\]\\]/g);if(links)return links.map(function(link){var differentName=link.match(/\\[\\[(.*?)\\-\\&gt;(.*?)\\]\\]/);return differentName?{name:differentName[1],link:differentName[2]}:(link=link.substring(2,link.length-2),{name:link,link:link})})},extractNPCNameFromText:function(text){var links=text.match(/\\(\\(.+?\\)\\)/g);if(links)return links.map(function(link){var name=link.match(/\\(\\((.*?)\\-\\&gt;(.*?)\\)\\)/);return name?{npcName:name[2]}:void 0})},convertPassage:function(passage){var dict={text:passage.innerHTML},links=Twison.extractLinksFromText(dict.text);links&&(dict.links=links);var npcInfo=Twison.extractNPCNameFromText(dict.text);if(npcInfo&&(dict.npcInfo=npcInfo),[\"name\",\"pid\",\"position\",\"tags\"].forEach(function(attr){var value=passage.attributes[attr].value;value&&(dict[attr]=value)}),dict.position){var position=dict.position.split(\",\");dict.position={x:position[0],y:position[1]}}return dict.tags&&(dict.tags=dict.tags.split(\" \")),dict},convertStory:function(story){var passages=story.getElementsByTagName(\"tw-passagedata\"),convertedPassages=Array.prototype.slice.call(passages).map(Twison.convertPassage),dict={passages:convertedPassages};[\"name\",\"startnode\",\"creator\",\"creator-version\",\"ifid\"].forEach(function(attr){var value=story.attributes[attr].value;value&&(dict[attr]=value)});var pidsByName={};return dict.passages.forEach(function(passage){pidsByName[passage.name]=passage.pid}),dict.passages.forEach(function(passage){passage.links&&passage.links.forEach(function(link){link.pid=pidsByName[link.link],link.pid||(link.broken=!0)})}),dict},convert:function(){var storyData=document.getElementsByTagName(\"tw-storydata\")[0],json=JSON.stringify(Twison.convertStory(storyData),null,2);document.getElementById(\"output\").innerHTML=json}};window.Twison=Twison;\t\t\r\n\t\t</script>\r\n\t</head>\r\n\t<body>\r\n\t\t<pre id=\"output\">\r\n\t\t\r\n\t\t</pre>\r\n\t\t<div id=\"storyData\" style=\"display: none;\">\r\n\t\t\t{{STORY_DATA}}\r\n\t\t</div>\r\n\t\t<script>\r\n\t\t\tTwison.convert()\r\n\t\t</script>\r\n\t</body>\r\n</html>"
});